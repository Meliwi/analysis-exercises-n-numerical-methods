# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colaboratory.

#**Trigonometric functions using Taylor series**
##### Melissa González Nebrijo - 1832127

###**¿Porque decidí truncar las funciones de esta manera?**

Hice uso de las series de Taylor para la implementación de las funciones trigonometricas teniendo en cuenta que esta es una aproximación mediante sumas de potencias y dicha suma se calcula a partir de las derivadas de la función para un determinado punto o valor. Este tipo de métodos es usado por calculadoras para computar algunas de las funciones que usamos todo el tiempo, es decir que se usan simplemente un número finito de términos seleccionados para proporcionar una gran precisión. 

En el caso de las funciones seno y coseno decidí truncarlas hasta cierto numero, ya que entre más derivadas considero en la suma más cercano es el valor hallado al punto, es decir que obtengo una mejor aproximación y el error es mucho menor en el resultado obtenido. 

A continuación se puede encontrar la implementación de las funciones:
"""

import math
# sin function with Taylor series 
def sin_fun(n):
  x = math.radians(n)
  sin_x = 0
  for i in range(21):
    sin_x = sin_x + pow(-1,i) * pow(x,2*i+1)/math.factorial((2*i+1))
  return sin_x
  
# using the function sin
out_sin = sin_fun(90)
print(out_sin)

# cos function with Taylor series 
def cos_fun(n):
  x = math.radians(n)
  cos_x = 0
  for i in range(21):
    cos_x = cos_x + pow(-1,i) * pow(x,2*i)/math.factorial(2*i) 
  return cos_x
  
# using the function cos
out_cos = cos_fun(45)
print(out_cos)

# tan function with Taylor series 
def tan_fun(n):
  x = math.radians(n)
  if n%90 == 0:
    print("Error - Result undefined")
  else:
    return sin_fun(n)/cos_fun(n)

#Using the function tan
out_tan = tan_fun(90)
print(out_tan)

# sec function with Taylor series
def sec_fun(n):
  x = math.radians(n)
  if n%90 == 0:
    print("Error - Result undefined")
  else: 
    return 1/cos_fun(n)

#Using the function sec 
out_sec = sec_fun(45)
print(out_sec)

#csc function with Taylor series
def csc_fun(n):
  x = math.radians(n)
  if n%180 == 0:
    print("Error - Result undefined")
  else: 
    return 1/sin_fun(n)

#Using the function csc
out_csc = csc_fun(360)
print(out_csc)

# cot function with Taylor series 
def cot_fun(n):
  x = math.radians(n)
  if n%180 == 0:
    print("Error - Result undefined")
  else:
    return cos_fun(n)/sin_fun(n)

#Using the function cot
out_cot = cot_fun(90)
print(out_cot)